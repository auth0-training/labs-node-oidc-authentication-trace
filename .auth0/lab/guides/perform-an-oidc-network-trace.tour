{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Perform an OIDC Network Trace",
  "steps": [
    {
      "file": "",
      "title": "What you'll do",
      "description": "**Here's what you'll do:**  \n\n1.  Locate, view, and understand the network trace for your expenses web application during OpenID Connect Authentication\n2.  Examine the claims in an ID token"
    },
    {
      "file": "",
      "title": "Start the Included Application",
      "description": "## Start the included application:\n\nWe've included a web application in this lab. \n\n1. #### Click [here](command:auth0.lab.tenantConfigure) to ensure that your Auth0 tenant is configured appropriately for this lab\n    Wait until you see the message that `resources.xml` has been successfully deploy before continuing to the next step.\n    ![resources deployed message](https://cdn.auth0.com/website/a0fun/v2/resources.png) \n1. #### Click [here](command:auth0.lab.localConfigure) to ensure that your application configurations are set locally (creates `.env` file under `src/web-app`).\n1. #### Last, click [here](command:workbench.action.files.saveAll) to save all of this progress.\n1. #### Build and run it locally by [clicking here](command:workbench.action.debug.start).\n   Wait a moment for the application to launch. You can see the progress in the debug console.\n\n1. #### If you are performing this lab on GitHub Codespaces, you may have to make the application's port public by clicking on the PORTS tab in your code editor, right-clicking the app's entry in the table, and selecting Port Visibility > Public.\n\n1. #### Then, [click here](command:auth0.lab.openEndpointByName?[\"Lab: Web App\"]) to open the application in your browser."
    },
    {
      "file": "",
      "title": "Open Chrome Developer Tools",
      "description": "## Open Chrome's developer tools:\n\n1. #### Go to the tab with your application. \n      \n2. #### Open _[Developer Tools](https://developers.google.com/web/tools/chrome-devtools/open)_.  \n\n3. #### In Developer Tools, switch to the _Network_ tab.\n\n![Open Developer Tools](https://cdn.auth0.com/website/a0fun/v2/OCDT.gif)"
    },
    {
      "file": "",
      "description": "## Perform the network trace:\n\n1. #### Refresh the browser to record the loading of the page.\n\n    The first request you should see is a GET request to your application homepage.  \n    Click on 'localhost' to see the same results. Note: This will be your GitHub Codespaces URL if you are working in a Codespace. This URL ends in *app.github.dev*.\n    ![GET Request](https://cdn.auth0.com/website/a0fun/v2/trace01-GETreq-v2.png)   \n\n2. #### Now click _Login_  \n      \n    **Note:** You should see a GET request to `https://your-tenant-name.auth0.com/authorize`. This is the middleware added in Lab: Web App taking over. The middleware checks if the user is logged in and, because they are not, it builds the OpenID Connect request to the authorization server URL and forwards the user to it. In this case, the complete GET request URL will look something like this (line breaks added for clarity):  \n    \n\n    ```http\n     https://YOUR_DOMAIN/authorize\n     ?client_id=YOUR_CLIENT_ID\n     &scope=openid%20profile%20email\n     &response_type=id_token\n     &nonce=71890cc63567e17b\n     &state=85d5152581b310e3389b\n     &redirect_uri=http%3A%2F%2Flocalhost%3A37500\n     &response_mode=form_post\n     ```   \n    \n    \n3. #### Click the _Payload_ tab in Chrome Developer Tools and view the _Query String Parameters_ section. Here, you can see the different URL parameters in a more-readable table format.  \n      \n    **Note:** The middleware sends several parameters. The important ones for this lab are:  \n    *   client_id: the unique identifier of your app at the authorization server\n    *   response_type: the requested artifacts; in this case, you are requesting an ID Token\n    *   scope: why the artifacts are required, i.e., what content and capabilities are needed\n    *   redirect_uri: where the results are to be sent after the login operation, i.e., the callback URL\n    *   response_mode: how the server's response is to be sent to the app; in this case, the response we want is a POST request.  \n          \n        ![Middleware parameters](https://cdn.auth0.com/website/a0fun/v2/trace03-querystringparam-v2.png)  \n          \n        \n4. #### Use the user credentials you created previously to log in and continue below.  \n      \n    **Note:** If you don't have a user, click the _Sign Up_ link at the bottom (if you're using the classic page instead of New in the Auth0 dashboard under Universal Login, this will be a tab at the top) and enter an email and password.  \n      \n    In the case where you're signing up for the first time, a consent dialog will be shown requesting access to your profile and email. Click the green button to accept and continue.   \n      \n    \n    The authorization server will log you in and POST the response - an error if something went wrong or the ID token if not - back to the callback URL for your application. Once you’ve successfully logged in, you should see your username on the page. This means authentication has been configured properly!  \n      \n    ![POST Reponse](https://cdn.auth0.com/website/a0fun/v2/trace04-POSTreq-v2.png)  \n      \n    The complete trace of the callback request is:  \n      \n      \n    ```http\n    Request URL: https://localhost:37500/callback\n    Request Method: POST\n    Status Code: 302 Found\n    Remote Address: 127.0.0.1:37500\n    Referrer Policy: strict-origin-when-cross-origin\n    ```\n      \n    **Note:** If you see an error in your console about an ID token used too early, this is likely a clock skew issue in your local environment. Try restarting your machine and walking through the login steps again from the beginning.  \n      \n    \n6. #### Click on the callback request and then the Payload tab in the Developer Console.      \n    \n7. ####  Find the Form Data section. Copy the complete id_token value.\n\n    ![Copy the complete id_token value](https://cdn.auth0.com/website/a0fun/v2/trace05-copyid_token-v2.png)  ",
      "title": "Perform the Network Trace"
    },
    {
      "file": "",
      "title": "Decode Your Token",
      "description": "## Decode your token:\n\n1. #### Go to [jwt.io](https://jwt.io/) and paste the ID token copied from the last step into the text area on the left. \n   Notice that as soon as you paste it, the contents of the text area on the right are updated. This is because the site decodes your ID token and displays its contents (claims) in that panel.\n\n  ![jwt.io](https://cdn.auth0.com/website/a0fun/v2/trace06-jwt.png)  \n  \n  **Note:** About the token structure:  \n  * The token structure: consists of the header (information about the token), the payload (the token’s claims and user profile information), and the signature.\n  * The claim iss is for the issuer of the token. It denotes who created and signed it. The value should match your Auth0 Domain value with an https:// prefixed.\n  * The claim sub is the subject of the token. It denotes to whom the token refers. In our case, the value matches the ID of the Auth0 user.\n  * The claim aud is the audience of the token. It denotes for which app the token is intended. In our case, this matches the Client ID of the application that made the authentication request.\n  * The claim iat shows when the token was issued (seconds since Unix epoch) and can be used to determine the token’s age.\n\n  The claim exp shows when the token expires (seconds since Unix epoch).\n\n  Congrats! You've performed a Network Trace!"
    },
    {
      "file": "",
      "title": "Recap",
      "description": "**In this lab you:**\n\n*   Traced OpenID Connect authentication.\n*   Examined the claims in an ID Token.\n\n"
    }
  ]
}