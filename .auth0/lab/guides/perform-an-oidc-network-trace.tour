{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Perform an OIDC Network Trace",
  "steps": [
    {
      "file": "README.md",
      "line": 1,
      "title": "What you'll do",
      "description": "**Here's what you'll do:**  \n\n1.  Locate, view, and understand the network trace for your expenses web application during OpenID Connect Authentication\n2.  Examine the claims in an ID token"
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Open Chrome Developer Tools",
      "description": "1. Open a Chrome browser tab.  \n      \n2.  In your browser, open **[Developer Tools](https://developers.google.com/web/tools/chrome-devtools/open)**.  \n\n3.  In developer tools, switch to the **Network** tab.\n\n![Open Developer Tools](./.auth0/lab/guides/images/OpenChromeDevTools.gif)"
    },
    {
      "file": "README.md",
      "line": 1,
      "description": "4.  Now navigate to your web application.\n\n     Don't log in yet. (Log out if you are logged in.)  \n\n5.  The first request you should see is a GET request to your application homepage:  \n      \n    ![GET Request](./.auth0/lab/guides/images/img-1.png)  \n      \n    \n6.  Click **Login**  \n      \n    **Note:** You should see a GET request to `https://your-tenant-name.auth0.com/authorize`. This is the middleware added in Exercise 1 taking over. The middleware checks if the user is logged in and, because they are not, it builds the OpenID Connect request to the authorization server URL and forwards the user to it. In this case, the complete GET request URL will look something like this (line breaks added for clarity):  \n      \n    ```http\n    https://YOUR\\_DOMAIN/authorize\n    ?client\\_id=YOUR\\_CLIENT\\_ID\n    &scope=openid%20profile%20email\n    &response\\_type=id\\_token\n    &nonce=71890cc63567e17b\n    &state=85d5152581b310e3389b\n    &redirect\\_uri=http%3A%2F%2Flocalhost%3A3000\n    &response\\_mode=form\\_post\n    ```\n      \n    \n7.  Scroll down while on the **Headers** tab in Chrome Developer Tools to the **Query String Parameters** section. Here, you can see the different URL parameters in a more-readable table format.  \n      \n    **Note:** The middleware sends several parameters. The important ones for this lab are:  \n    *   client\\_id: the unique identifier of your app at the authorization server\n    *   response\\_type: the requested artifacts; in this case, you are requesting an ID Token\n    *   scope: why the artifacts are required, i.e., what content and capabilities are needed\n    *   redirect\\_uri: where the results are to be sent after the login operation, i.e., the callback URL\n    *   response\\_mode: how the server's response is to be sent to the app; in this case, the response we want is a POST request.  \n          \n        ![Middleware parameters](./.auth0/lab/guides/images/img-2.png)  \n          \n        \n8.  Use the user credentials you created previously to log in and continue below.  \n      \n    **Note:** If you don't have a user, click the **Sign Up** link at the bottom (if you're using the classic page instead of New in the Auth0 dashboard under Universal Login, this will be a tab at the top) and enter an email and password.  \n      \n    In the case where you're signing up for the first time, a consent dialog will be shown requesting access to your profile and email. Click the green button to accept and continue.  \n      \n    \n9.  The authorization server will log you in and POST the response - an error if something went wrong or the ID token if not - back to the callback URL for your application. Once you’ve successfully logged in, you should see your username on the page. This means authentication has been configured properly!  \n      \n    ![POST Reponse](./.auth0/lab/guides/images/img-3.png)  \n      \n    The complete trace of the callback request is:  \n      \n    ```http\n    Request URL: https://web-app-git-master-{YOUR-GITHUB-USERNAME}.vercel.app/callback\n    Request Method: POST\n    Status Code: 302 \n    Remote Address: 76.76.21.21:443\n    Referrer Policy: strict-origin-when-cross-origin\n    cache-control: s-maxage=0\n    content-length: 112\n    content-type: text/html; charset=utf-8\n    location: https://web-app-git-master-{YOUR-GITHUB-USERNAME}.vercel.app\n    set-cookie: appSession=eyJh\\[..\\]; Path=/; Expires=Tue, 17 Nov 2020 22:57:04 GMT; HttpOnly; SameSite=Lax\n    ```\n      \n    **Note:** If you see an error in your console about an ID token used too early, this is likely a clock skew issue in your local environment. Try restarting your machine and walking through the login steps again from the beginning.  \n      \n    \n10.  Click on the callback request and then search for the Form Data section of the Developer Console's Headers tab.  \n      \n    \n11.  Copy the complete id\\_token value.\n  ![Copy the complete id_token value](./.auth0/lab/guides/images/img-4.png)  \n      \n    \n12.  Go to [jwt.io](https://jwt.io/) and paste the ID token copied from the last step into the text area on the left. Notice that as soon as you paste it, the contents of the text area on the right are updated. This is because the site decodes your ID token and displays its contents (claims) in that panel.\n  ![jwt.io](./.auth0/lab/guides/images/img-5.png)\n  **Note:** About the token structure:  \n  * The token structure: consists of the header (information about the token), the payload (the token’s claims and user profile information), and the signature.\n  * The claim iss is for the issuer of the token. It denotes who created and signed it. The value should match your Auth0 Domain value with an https:// prefixed.\n  * The claim sub is the subject of the token. It denotes to whom the token refers. In our case, the value matches the ID of the Auth0 user.\n  * The claim aud is the audience of the token. It denotes for which app the token is intended. In our case, this matches the Client ID of the application that made the authentication request.\n  * The claim iat shows when the token was issued (seconds since Unix epoch) and can be used to determine the token’s age.\n\n  The claim exp shows when the token expires (seconds since Unix epoch).\n\n  Congrats! You've performed a Network Trace!",
      "title": "Perform the Network Trace"
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Recap",
      "description": "**In this lab you:**\n\n*   Traced OpenID Connect authentication.\n*   Examined the claims in an ID Token."
    }
  ]
}